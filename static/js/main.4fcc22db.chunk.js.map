{"version":3,"sources":["logo.svg","Pathfinder/Node/Node.jsx","algorithms/dijkstra.js","algorithms/tools/getnodes.js","algorithms/astar.js","Pathfinder/Pathfinder.jsx","components/navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","row","col","addClass","id","className","Component","dijkstra","grid","startNode","endNode","visitedNodesSequence","distance","unVisitedNodes","nodes","node","push","getNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbours","sort","nodeA","nodeB","neighbours","getUnvisitedNeighbours","n","previousNode","filter","updateNeighbours","currentNode","open","getNeighbours","neighbour","gScoreOfNeighbour","g","f","h","includes","getNodeWithLowestF","nodeWithLowestF","min","Math","abs","GRID_ROWS","window","innerHeight","GRID_COLS","innerWidth","START_ROW","floor","START_COL","END_ROW","END_COL","ceil","Pathfinder","state","mouseIsPressed","isVisualising","isDraggingStart","isDraggingEnd","algorithm","getStartGrid","setState","document","querySelector","removePaths","newGrid","getGridWithWalls","nodeDOM","classList","contains","remove","removeNode","type","shortestPathNodes","i","setTimeout","animateShortestPath","add","showButtons","animate","resetGrid","visualiseDijkstra","visualiseAStar","getShortestPathNodes","animateDijkstra","updateShortestPath","splice","indexOf","astar","animateAStar","querySelectorAll","forEach","BTN","onClick","clearGrid","disableButtons","visualiseAlgorithm","map","rowIndex","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","newRow","createNode","slice","newNode","unshift","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4fcc22db.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport { FaBullseye, FaChevronRight } from \"react-icons/fa\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      isStart,\n      isEnd,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      col,\n    } = this.props;\n    const addClass = isEnd\n      ? \"node-end\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    if (isStart) {\n      return (\n        <div\n          id={`node-${row}-${col}`}\n          className={`node ${addClass}`}\n          onMouseDown={() => onMouseDown(row, col)}\n          onMouseEnter={() => onMouseEnter(row, col)}\n          onMouseUp={() => onMouseUp()}\n        >\n          <div className=\"node-icon\">\n            <FaChevronRight />\n          </div>\n        </div>\n      );\n    } else if (isEnd) {\n      return (\n        <div\n          id={`node-${row}-${col}`}\n          className={`node ${addClass}`}\n          onMouseDown={() => onMouseDown(row, col)}\n          onMouseEnter={() => onMouseEnter(row, col)}\n          onMouseUp={() => onMouseUp()}\n        >\n          <div className=\"node-icon\">\n            <FaBullseye />\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${addClass}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","import { getNodes } from \"./tools/getnodes\";\n\nexport const dijkstra = (grid, startNode, endNode) => {\n  const visitedNodesSequence = [];\n  startNode.distance = 0;\n  const unVisitedNodes = getNodes(grid);\n  while (!!unVisitedNodes.length) {\n    sortNodesByDistance(unVisitedNodes);\n    const closestNode = unVisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesSequence;\n    closestNode.isVisited = true;\n    visitedNodesSequence.push(closestNode);\n    if (closestNode === endNode) return visitedNodesSequence;\n    updateUnvisitedNeighbours(closestNode, grid);\n  }\n};\n\nconst sortNodesByDistance = (unVisitedNodes) => {\n  unVisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n};\n\nconst updateUnvisitedNeighbours = (node, grid) => {\n  const neighbours = getUnvisitedNeighbours(node, grid);\n  for (const n of neighbours) {\n    n.distance = node.distance + 1;\n    n.previousNode = node;\n  }\n};\n\nconst getUnvisitedNeighbours = (node, grid) => {\n  const neighbours = [];\n  const { col, row } = node;\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours.filter((n) => !n.isVisited);\n};\n","export const getNodes = (grid) => {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n};\n","export const astar = (grid, startNode, endNode) => {\n  startNode.g = 0;\n  startNode.f = h(startNode, endNode);\n  const visitedNodesSequence = [];\n  var open = [startNode];\n\n  while (!!open.length) {\n    const currentNode = getNodeWithLowestF(open, grid, startNode, endNode);\n\n    open = updateNeighbours(currentNode, grid, open, endNode);\n\n    visitedNodesSequence.push(currentNode);\n\n    if (currentNode === endNode) return visitedNodesSequence;\n\n    open.splice(open.indexOf(currentNode), 1);\n  }\n\n  return visitedNodesSequence;\n};\n\nconst updateNeighbours = (currentNode, grid, open, endNode) => {\n  const neighbours = getNeighbours(currentNode, grid);\n  for (const neighbour of neighbours) {\n    if (neighbour.isWall) continue;\n    const gScoreOfNeighbour = currentNode.g + 1;\n\n    if (gScoreOfNeighbour < neighbour.g) {\n      neighbour.previousNode = currentNode;\n      neighbour.g = gScoreOfNeighbour;\n      neighbour.f = gScoreOfNeighbour + h(neighbour, endNode);\n      if (!open.includes(neighbour)) {\n        open.push(neighbour);\n      }\n    }\n  }\n  return open;\n};\n\nconst getNodeWithLowestF = (open, grid, startNode, endNode) => {\n  var nodeWithLowestF,\n    min = Infinity;\n\n  for (const node of open) {\n    const f = node.g + h(node, endNode);\n    if (f <= min || (f === min && nodeWithLowestF.g < node.g)) {\n      min = f;\n      nodeWithLowestF = node;\n    }\n  }\n  return nodeWithLowestF;\n};\n\nconst h = (node, endNode) => {\n  return Math.abs(node.col - endNode.col) + Math.abs(node.row - endNode.row);\n};\n\nconst getNeighbours = (node, grid) => {\n  const neighbours = [];\n  const { col, row } = node;\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours;\n};\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra } from \"../algorithms/dijkstra\";\nimport { astar } from \"../algorithms/astar\";\nimport { FaBullseye } from \"react-icons/fa\";\n\nimport \"./Pathfinder.css\";\nimport \"./components.css\";\n\nconst GRID_ROWS = (window.innerHeight - 125) / (25 + 2);\nconst GRID_COLS = window.innerWidth / (25 + 4);\n\nvar START_ROW = Math.floor(GRID_ROWS / 2);\nvar START_COL = Math.floor(GRID_COLS / 3);\nvar END_ROW = Math.floor(GRID_ROWS / 2);\nvar END_COL = Math.ceil(GRID_COLS - GRID_COLS / 3);\n\nexport default class Pathfinder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      isVisualising: false,\n      isDraggingStart: false,\n      isDraggingEnd: false,\n      algorithm: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const grid = getStartGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    if (this.state.isVisualising) return;\n\n    const nodeDOM = document.querySelector(`#node-${row}-${col}`);\n    const { grid } = this.state;\n    const node = grid[row][col];\n\n    this.removePaths(grid);\n\n    if (node.isStart) {\n      this.setState({ isDraggingStart: true });\n    } else if (node.isEnd) {\n      this.setState({ isDraggingEnd: true });\n    }\n\n    const newGrid = getGridWithWalls(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  removePaths(grid) {\n    for (let row = 0; row < GRID_ROWS; row++) {\n      for (let col = 0; col < GRID_COLS; col++) {\n        const nodeDOM = document.querySelector(`#node-${row}-${col}`);\n        if (nodeDOM.classList.contains(\"node-path\"))\n          nodeDOM.classList.remove(\"node-path\");\n      }\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed || this.state.isVisualising) return;\n\n    const nodeDOM = document.querySelector(`#node-${row}-${col}`);\n\n    var { grid } = this.state;\n\n    const node = grid[row][col];\n\n    if (this.state.isDraggingStart && !node.isEnd) {\n      nodeDOM.className = \"node node-start\";\n      this.removeNode(\"start\", grid);\n      node.isStart = true;\n      node.isWall = false;\n      START_ROW = row;\n      START_COL = col;\n    } else if (this.state.isDraggingEnd && !node.isStart) {\n      nodeDOM.className = \"node node-end\";\n      this.removeNode(\"end\", grid);\n      node.isEnd = true;\n      node.isWall = false;\n      END_ROW = row;\n      END_COL = col;\n    } else {\n      grid = getGridWithWalls(this.state.grid, row, col);\n    }\n\n    this.setState({ grid: grid });\n  }\n\n  removeNode(type, grid) {\n    for (let row = 0; row < GRID_ROWS; row++) {\n      for (let col = 0; col < GRID_COLS; col++) {\n        const node = grid[row][col];\n        if (node.isStart || node.isEnd) {\n          switch (type) {\n            case \"start\":\n              node.isStart = false;\n              break;\n            case \"end\":\n              node.isEnd = false;\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n    this.setState({ isDraggingStart: false });\n    this.setState({ isDraggingEnd: false });\n  }\n\n  animateDijkstra(visitedNodesSequence, shortestPathNodes) {\n    for (let i = 0; i <= visitedNodesSequence.length; i++) {\n      if (i === visitedNodesSequence.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathNodes);\n        }, 10 * i);\n        return;\n      }\n      const node = visitedNodesSequence[i];\n      const nodeDOM = document.querySelector(`#node-${node.row}-${node.col}`);\n      setTimeout(() => {\n        if (i % 4 === 0) {\n          nodeDOM.classList.add(\"node-marker\");\n        }\n        setTimeout(() => {\n          nodeDOM.className = \"node node-visited\";\n        }, 200);\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(shortestPathNodes) {\n    for (let i = 0; i < shortestPathNodes.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathNodes[i];\n        document.querySelector(`#node-${node.row}-${node.col}`).className =\n          \"node node-path\";\n      }, 30 * i);\n    }\n    setTimeout(() => {\n      this.setState({ isVisualising: false });\n      this.showButtons();\n    }, 30 * shortestPathNodes.length - 1 + 500);\n  }\n\n  updateShortestPath(grid, shortestPathNodes) {\n    for (let i = 0; i < shortestPathNodes.length; i++) {\n      const node = shortestPathNodes[i];\n      document.querySelector(`#node-${node.row}-${node.col}`).className =\n        \"node node-path-static\";\n    }\n  }\n\n  resetGrid(grid) {\n    for (let row = 0; row < GRID_ROWS; row++) {\n      for (let col = 0; col < GRID_COLS; col++) {\n        const node = grid[row][col];\n        node.isVisited = false;\n        node.distance = Infinity;\n        node.g = Infinity;\n        node.f = Infinity;\n        node.previousNode = null;\n        if (!node.isStart && !node.isEnd && !node.isWall) {\n          document.querySelector(`#node-${row}-${col}`).className = \"node\";\n        }\n        if (node.isStart) {\n          document.querySelector(`#node-${row}-${col}`).className =\n            \"node node-start\";\n        } else if (node.isEnd) {\n          document.querySelector(`#node-${row}-${col}`).className =\n            \"node node-end\";\n        }\n      }\n    }\n    return grid;\n  }\n\n  clearGrid(grid) {\n    if (this.state.isVisualising) return;\n    for (let row = 0; row < GRID_ROWS; row++) {\n      for (let col = 0; col < GRID_COLS; col++) {\n        const node = grid[row][col];\n        node.isVisited = false;\n        node.distance = Infinity;\n        node.g = Infinity;\n        node.f = Infinity;\n        node.previousNode = null;\n        if (!node.isStart && !node.isEnd) {\n          document.querySelector(`#node-${row}-${col}`).className = \"node\";\n        }\n        if (node.isStart) {\n          document.querySelector(`#node-${row}-${col}`).className =\n            \"node node-start\";\n        } else if (node.isEnd) {\n          document.querySelector(`#node-${row}-${col}`).className =\n            \"node node-end\";\n        } else if (node.isWall) {\n          node.isWall = false;\n        }\n      }\n    }\n  }\n\n  visualiseAlgorithm(algorithm, animate) {\n    if (this.state.isVisualising) return;\n    this.setState({ isVisualising: true, algorithm: algorithm });\n    const { grid } = this.state;\n    this.setState({ grid: this.resetGrid(grid) });\n    const startNode = grid[START_ROW][START_COL];\n    const endNode = grid[END_ROW][END_COL];\n    switch (algorithm) {\n      case \"Dijkstra\":\n        this.visualiseDijkstra(grid, startNode, endNode, animate);\n        break;\n      case \"A*\":\n        this.visualiseAStar(grid, startNode, endNode, animate);\n        break;\n      default:\n        break;\n    }\n  }\n\n  visualiseDijkstra(grid, startNode, endNode, animate) {\n    const visitedNodesSequence = dijkstra(grid, startNode, endNode);\n    const shortestPathNodes = getShortestPathNodes(endNode);\n    if (animate) this.animateDijkstra(visitedNodesSequence, shortestPathNodes);\n    else this.updateShortestPath(grid, shortestPathNodes);\n  }\n\n  visualiseAStar(grid, startNode, endNode, animate) {\n    const visitedNodesSequence = astar(grid, startNode, endNode);\n    const shortestPathNodes = getShortestPathNodes(endNode);\n    if (animate) this.animateAStar(visitedNodesSequence, shortestPathNodes);\n    else this.updateShortestPath(grid, shortestPathNodes);\n  }\n\n  animateAStar(visitedNodesSequence, shortestPathNodes) {\n    for (let i = 0; i <= visitedNodesSequence.length; i++) {\n      if (i === visitedNodesSequence.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathNodes);\n        }, 20 * i + 500);\n        return;\n      }\n      const node = visitedNodesSequence[i];\n      const nodeDOM = document.querySelector(`#node-${node.row}-${node.col}`);\n      setTimeout(() => {\n        nodeDOM.classList.add(\"node-marker\");\n        setTimeout(() => {\n          nodeDOM.className = \"node node-visited\";\n        }, 200);\n      }, 20 * i);\n    }\n  }\n\n  disableButtons() {\n    const BTNS = document.querySelectorAll(\".btn\");\n    BTNS.forEach((BTN) => {\n      BTN.classList.add(\"btn-disabled\");\n    });\n  }\n\n  showButtons() {\n    const BTNS = document.querySelectorAll(\".btn\");\n    BTNS.forEach((BTN) => {\n      BTN.classList.remove(\"btn-disabled\");\n    });\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <nav className=\"navbar\">\n          <div className=\"logo\"></div>\n          <div className=\"buttons\">\n            <div\n              className={`btn clear-btn`}\n              onClick={() => {\n                this.clearGrid(this.state.grid);\n              }}\n            >\n              <span className=\"bold\">Clear</span>\n            </div>\n            <div\n              className={`btn visualise-btn`}\n              onClick={() => {\n                this.disableButtons();\n                this.visualiseAlgorithm(\"A*\", true);\n              }}\n            >\n              Visualise&nbsp;\n              <span className=\"bold\">A*</span>\n            </div>\n            <div\n              className={`btn visualise-btn`}\n              onClick={() => {\n                this.disableButtons();\n                this.visualiseAlgorithm(\"Dijkstra\", true);\n              }}\n            >\n              Visualise <span className=\"bold\">Dijkstra</span>\n            </div>\n          </div>\n        </nav>\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, nodeIndex) => {\n                  const { isStart, isEnd, isWall, row, col } = node;\n                  if (isStart) {\n                    return (\n                      <Node\n                        key={nodeIndex}\n                        isStart={isStart}\n                        isEnd={isEnd}\n                        isWall={isWall}\n                        row={row}\n                        col={col}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) =>\n                          this.handleMouseDown(row, col)\n                        }\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp()}\n                      >\n                        <FaBullseye />\n                      </Node>\n                    );\n                  } else if (isEnd) {\n                    return (\n                      <Node\n                        key={nodeIndex}\n                        isStart={isStart}\n                        isEnd={isEnd}\n                        isWall={isWall}\n                        row={row}\n                        col={col}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) =>\n                          this.handleMouseDown(row, col)\n                        }\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp()}\n                      ></Node>\n                    );\n                  }\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      isStart={isStart}\n                      isEnd={isEnd}\n                      isWall={isWall}\n                      row={row}\n                      col={col}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getStartGrid = () => {\n  const grid = [];\n  for (let row = 0; row < GRID_ROWS; row++) {\n    const newRow = [];\n    for (let col = 0; col < GRID_COLS; col++) {\n      newRow.push(createNode(row, col));\n    }\n    grid.push(newRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    col,\n    row,\n    isStart: row === START_ROW && col === START_COL,\n    isEnd: row === END_ROW && col === END_COL,\n    distance: Infinity,\n    isWall: false,\n    isVisited: false,\n    previousNode: null,\n    g: Infinity,\n    f: Infinity,\n  };\n};\n\nconst getGridWithWalls = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isEnd) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\nexport const getShortestPathNodes = (endNode) => {\n  const shortestPathNodes = [];\n  let currentNode = endNode;\n  while (currentNode != null) {\n    shortestPathNodes.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPathNodes;\n};\n","import React, { Component, useRef } from \"react\";\n\nimport \"./components.css\";\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: false,\n    };\n  }\n  render() {\n    return (\n      <nav className=\"navbar\">\n        <div className=\"logo\"></div>\n        <div className=\"buttons\">\n          <div className={`visualise-btn`}>\n            Visualise&nbsp;\n            <span className=\"bold\">A*</span>\n          </div>\n          <div className={`visualise-btn`}>\n            Visualise <span className=\"bold\">Dijkstra</span>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Pathfinder from \"./Pathfinder/Pathfinder\";\nimport Navbar from \"./components/navbar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinder></Pathfinder>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}